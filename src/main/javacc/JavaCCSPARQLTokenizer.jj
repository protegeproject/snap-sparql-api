options {
JAVA_UNICODE_ESCAPE=true;
UNICODE_INPUT=true;
BUILD_PARSER=false;
STATIC=false;
    //DEBUG_TOKEN_MANAGER=true;
    //DEBUG_PARSER=true;
}

PARSER_BEGIN(JavaCCSPARQLTokenizer)

package org.semanticweb.owlapi.sparql.parser.tokenizer.impl;

public class JavaCCSPARQLTokenizer {


}

PARSER_END(JavaCCSPARQLTokenizer)

/////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////


SKIP: {
    <" "|"\t"|"\n"|"\r">
}

TOKEN [IGNORE_CASE]: {
    <AS: "AS">
}

TOKEN [IGNORE_CASE]: {
    <BASE: "BASE">
}

TOKEN [IGNORE_CASE]: {
    <PREFIX: "PREFIX">
}

TOKEN [IGNORE_CASE]: {
    <SELECT: "SELECT">
}

TOKEN [IGNORE_CASE]: {
    <CONSTRUCT: "CONSTRUCT">
}

TOKEN [IGNORE_CASE]: {
    <WHERE: "WHERE">
}

TOKEN [IGNORE_CASE]: {
    <FROM: "FROM">
}


TOKEN [IGNORE_CASE]: {
    <DISTINCT: "DISTINCT">
}

TOKEN [IGNORE_CASE]: {
    <REDUCED: "REDUCED">
}

TOKEN [IGNORE_CASE]: {
    <UNION: "UNION">
}


TOKEN [IGNORE_CASE]: {
    <NAMED: "NAMED">
}

TOKEN [IGNORE_CASE]: {
    <ORDER: "ORDER">
}

TOKEN [IGNORE_CASE]: {
    <GROUP: "GROUP">
}

TOKEN [IGNORE_CASE]: {
    <BY: "BY">
}

TOKEN [IGNORE_CASE]: {
    <ASC: "ASC">
}

TOKEN [IGNORE_CASE]: {
    <DESC: "DESC">
}


TOKEN [IGNORE_CASE]: {
    <A: "a">
}

TOKEN: {
    <ASTERISK: "*">
}

TOKEN [IGNORE_CASE]: {
    <TRUE: "true">
}

TOKEN [IGNORE_CASE]: {
    <FALSE: "false">
}

TOKEN: {
    <OPEN_BRACE: "{">
}

TOKEN: {
    <CLOSE_BRACE: "}">
}

TOKEN: {
    <OPEN_SQUARE_BRACKET: "[">
}

TOKEN: {
    <CLOSE_SQUARE_BRACKET: "]">
}

TOKEN: {
    <DOT: ".">
}

TOKEN: {
    <COMMA: ",">
}

TOKEN: {
    <SEMI_COLON: ";">
}


TOKEN: {
    <DOUBLE_CARET: "^^">
}

TOKEN [IGNORE_CASE]: {
    <FILTER: "FILTER">
}


TOKEN [IGNORE_CASE]: {
    <HAVING: "HAVING">
}


TOKEN [IGNORE_CASE]: {
    <BIND: "BIND">
}

TOKEN: {
    <OR: "||">
}


TOKEN: {
    <AND: "&&">
}

TOKEN: {
    <NOT: "!">
}

TOKEN: {
    <EQUAL: "=">
}

TOKEN: {
    <NOT_EQUAL: "!=">
}


TOKEN: {
    <GREATER_THAN: ">">
}

TOKEN: {
    <GREATER_THAN_OR_EQUAL: ">=">
}

TOKEN: {
    <LESS_THAN: "<">
}

TOKEN: {
    <LESS_THAN_OR_EQUAL: "<=">
}


TOKEN: {
    <PLUS: "+">
}


TOKEN: {
    <MINUS: "-">
}


TOKEN [IGNORE_CASE]: {
    <OPTIONAL_KW: "OPTIONAL">
}


TOKEN: {
    <DIVIDE: "/">
}

TOKEN [IGNORE_CASE]: {
    <MINUS_KW: "MINUS">
}



TOKEN [IGNORE_CASE]: {
    <BUILT_IN_CALL: "STR" | "LANG" | "LANGMATCHES" | "DATATYPE" | "BOUND" | "IRI" | "URI" | "BNODE" | "RAND" |
                    "ABS" | "CEIL" | "FLOOR" | "ROUND" | "CONCAT" | "SUBSTR" | "STRLEN" | "REPLACE" | "UCASE" |
                    "LCASE" | "ENCODE_FOR_URI" | "CONTAINS" | "STRSTARTS" | "STRENDS" | "STRBEFORE" | "STRAFTER" |
                    "YEAR" | "MONTH" | "DAY" | "HOURS" | "MINUTES" | "SECONDS" | "TIMEZONE" | "TZ" | "NOW" |
                    "MD5" | "SHA1" | "SHA256" | "SHA384" | "SHA512" | "COALESCE" | "IF" | "STRLANG" | "STRDT" |
                    "SAMETERM" | "ISIRI" | "ISURI" | "ISBLANK" | "ISLITERAL" | "ISNUMERIC" | "REGEX" | "UUID" |
                    "STRUUID" | "SUM" | "COUNT" | "MIN" | "MAX" | "AVG" | "SAMPLE" | "GROUP_CONCAT" | "SPLITCAMEL">
}

TOKEN [IGNORE_CASE]: {
    <SCALAR_KEY: "SEPARATOR">
}



TOKEN: {
    <IRI_REF: "<"((~["<",">","{","}","|","^","`","\\","\u0000"-"\u0020"])*)">">
}

TOKEN: {
    <PNAME_NS: (<PN_PREFIX>)?":">
}

TOKEN: {
    <PNAME_LN: <PNAME_NS><PN_LOCAL>>
}

TOKEN: {
    <BLANK_NODE_LABEL: "_:" (<PN_CHARS_U> | ["0"-"9"])((<PN_CHARS>|<DOT>)* <PN_CHARS>)?>
}

TOKEN: {
    <VAR1: "?" <VARNAME>>
}

TOKEN: {
    <VAR2: "$" <VARNAME>>
}

TOKEN: {
    <LANGTAG: "@"(["a"-"z","A"-"Z"])+ ("-" (["a"-"z","A"-"Z","0"-"9"])+)*>
}

TOKEN: {
    <INTEGER: (["0"-"9"])+>
}

TOKEN: {
    <DECIMAL: (["0"-"9"])*"."(["0"-"9"])+>
}

TOKEN: {
    <DOUBLE: ((["0"-"9"])+"."(["0"-"9"])*<EXPONENT>) | ("." (["0"-"9"])+ <EXPONENT>) | ((["0"-"9"])+ <EXPONENT>) >
}

TOKEN: {
    <INTEGER_POSITIVE: "+"<INTEGER>>
}

TOKEN: {
    <DECIMAL_POSITIVE: "+"<DECIMAL>>
}

TOKEN: {
    <DOUBLE_POSITIVE: "+"<DOUBLE>>
}

TOKEN: {
    <INTEGER_NEGATIVE: "-"<INTEGER>>
}

TOKEN: {
    <DECIMAL_NEGATIVE: "-"<DECIMAL>>
}

TOKEN: {
    <DOUBLE_NEGATIVE: "-"<DOUBLE>>
}

TOKEN: {
    <EXPONENT: ["e","E"](["+","-"])? (["0"-"9"])+>
}

TOKEN: {
    <STRING_LITERAL1: "'"( (~["'","\n","\f","\r"]) | <ECHAR>)* "'">
}

TOKEN: {
    <STRING_LITERAL2: "\""( (~["\"","\n","\f","\r"]) | <ECHAR>)* "\"">
}

TOKEN: {
    <STRING_LITERAL_LONG1: "'''"(("'"|"''")?(~["'","\\"]|<ECHAR>))*"'''">
}

TOKEN: {
    <STRING_LITERAL_LONG2: "\"\"\""(("\""|"\"\"")?(~["\"","\\"]|<ECHAR>))*"\"\"\"">
}

TOKEN: {
    <ECHAR: "\\"["\t","\b","\n","\r","\f","\\","\"","\'"]>
}

//TOKEN: {
//    <NIL: "(" (<WS>)* ")">
//}

TOKEN: {
    <WS: ("\u0020"|"\u0009"|"\n"|"\r")>
}

TOKEN: {
    <ANON: <OPEN_SQUARE_BRACKET>(<WS>)*<CLOSE_SQUARE_BRACKET>>
}

TOKEN: {
    <PN_PREFIX: <PN_CHARS_BASE>((<PN_CHARS>|".")*<PN_CHARS>)?>
}

TOKEN: {
    <PN_LOCAL: (<PN_CHARS_U> | ["0"-"9"] | <PLX>) ((<PN_CHARS> | "." | <PLX>)* (<PN_CHARS> | <PLX> ))? >
}

TOKEN: {
    <VARNAME: (<PN_CHARS_U>|["0"-"9"])(<PN_CHARS_U> | ["0"-"9"] | "\u00B7" | ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"])*>
}

TOKEN: {
    <PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00B7" | ["\u0300"-"\u036F"] | ["\u203F"-"\u2040"]>
}

TOKEN: {
    <PN_CHARS_U: <PN_CHARS_BASE> | "_"  >
}

TOKEN: {
    <PN_CHARS_BASE:   ["A"-"Z"]
                    | ["a"-"z"]
                    | ["\u00C0"-"\u00D6"]
                    | ["\u00D8"-"\u00F6"]
                    | ["\u00F8"-"\u02FF"]
                    | ["\u0370"-"\u037D"]
                    | ["\u037F"-"\u1FFF"]
                    | ["\u200C"-"\u200D"]
                    | ["\u2070"-"\u218F"]
                    | ["\u2C00"-"\u2FEF"]
                    | ["\u3001"-"\uD7FF"]
                    | ["\uF900"-"\uFDCF"]
                    | ["\uFDF0"-"\uFFFD"] >
                //    | ["\u10000"-"\uEFFFF"] >
}

TOKEN: {
    <PLX: <PERCENT> | <PN_LOCAL_ESC>>
}

TOKEN: {
    <PERCENT: "%" <HEX> <HEX>>
}

TOKEN: {
    <HEX: (["0"-"9"]|["A"-"F"]|["f"-"f"])>
}

TOKEN: {
    <COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?>
}

TOKEN: {
    <PN_LOCAL_ESC: "\\"( "_" | "~" | "." | "-" | "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=" | ":" | "/" | "?" | "#" | "@" | "%" )>
}

TOKEN: {
    <OPEN_PAR: "(">
}

TOKEN: {
    <CLOSE_PAR: ")">
}

TOKEN: {
    <ERROR: ~[]>
}


